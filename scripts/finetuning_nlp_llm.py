# -*- coding: utf-8 -*-
"""Copy of finetuning NLP LLM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18rU09Wm2X1zEiz02noNoTj7k1w-lOvlY
"""
"""
This script finetunes the Roberta-base model using a small dataset of reviews for sentiment classification
"""
# load necessary modules
import pandas as pd
from transformers import pipeline
from tqdm import tqdm
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.model_selection import train_test_split
import logging
logging.basicConfig(level=logging.ERROR)
from transformers import RobertaTokenizer, RobertaForSequenceClassification, Trainer, TrainingArguments
from torch.utils.data import Dataset
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from statsmodels.stats.contingency_tables import mcnemar
import os


df = pd.read_csv("./data/electronics_reviews.csv")
#df.head() #get a snippet of the data

# check for distinct sentiments
df['sentiment'].unique()

# create a dictionary for the numerical labels for each actual unique sentiment
label_int = {'negative': 0, 'neutral': 1, 'positive': 2}

# add a new column, label, and map the integer value for each sentiment
df['label'] = df['sentiment'].map(label_int)

# FINETUNING

# select only necessary columns for training the base model
data = df[["review_text", "sentiment", "label"]]

# split data into training and validation
train_texts, val_texts, train_labels, val_labels = train_test_split(data['review_text'], data['label'], test_size=0.2, random_state=42)

# Load tokenizer and model
tokenizer = RobertaTokenizer.from_pretrained('roberta-base')
model = RobertaForSequenceClassification.from_pretrained('roberta-base', num_labels=3)

# function to tokenize text
def tokenize_data(texts, labels):
    return tokenizer(list(texts), padding=True, truncation=True, return_tensors="pt"), list(labels)

# encode the reviews
train_encodings, train_labels = tokenize_data(train_texts, train_labels)
val_encodings, val_labels = tokenize_data(val_texts, val_labels)

# Dataset wrappers
class SentimentDataset(Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels
    def __getitem__(self, idx):
        item = {key: val[idx] for key, val in self.encodings.items()}
        item['labels'] = self.labels[idx]
        return item
    def __len__(self):
        return len(self.labels)

# Wrap encoded data into a PyTorch-compatible dataset
train_dataset = SentimentDataset(train_encodings, train_labels)
val_dataset = SentimentDataset(val_encodings, val_labels)

# Define training arguments
training_args = TrainingArguments(
    output_dir='./results',          # output directory
    num_train_epochs=3,              # number of training epochs
    per_device_train_batch_size=8,   # batch size for training
    warmup_steps=500,                # number of warmup steps for learning rate scheduler
    weight_decay=0.01,               # strength of weight decay
    logging_dir='./logs',            # directory for storing logs
)

# Initialize the Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset
)

# Start training
trainer.train()

# Evaluate
trainer.evaluate()

trainer.state.log_history  # View logs

# Save log history to a .txt file
with open("./logs/training_logs.txt", "w") as f:
    for entry in trainer.state.log_history:
        f.write(str(entry) + "\n")

# store logs in dataframe
logs = pd.DataFrame(trainer.state.log_history)

# plot the logs (training and validation loss oer epoch)
plt.figure(figsize=(10, 5))
plt.plot(logs['epoch'], logs['loss'], label='Training Loss')

if 'eval_loss' in logs.columns:
    plt.plot(logs['epoch'], logs['eval_loss'], label='Validation Loss')

plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Training & Validation Loss')
plt.legend()
plt.grid(True)
plt.savefig("./plots/training_and_validation_loss_plot.png", dpi=300, bbox_inches='tight')  # Save the plot
plt.show()


# save finetuned model params
#trainer.save_model('./finetuned_model1')

# Get predictions from finetuned model
predictions = trainer.predict(val_dataset)
preds1 = np.argmax(predictions.predictions, axis=1)

# print prediction reports for finetuned model
# plot confusion matrix
print(classification_report(predictions.label_ids, preds1, target_names=['Negative', 'Neutral', 'Positive']))

cm1 = confusion_matrix(predictions.label_ids, preds1)
sns.heatmap(cm1, annot=True, fmt='d', cmap='Blues', xticklabels=['Negative', 'Neutral', 'Positive'], 
            yticklabels=['Negative', 'Neutral', 'Positive'])
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix For Finetuned Roberta Model')
plt.savefig("./plots/Confusion_Matrix_For_Finetuned_Roberta_Model.png", dpi=300, bbox_inches='tight')  # Save the plot
plt.show()


# test the roberta-base model on the validation dataset for purposes of statistical comparison with finetuned prediction
preds2 = [label_map[zero_shot_model(text)[0]['label']] for text in tqdm(val_texts)]

# classification report
print(classification_report(val_labels, preds2, target_names=["Negative", "Neutral", "Positive"]))

cm2 = confusion_matrix(predictions.label_ids, preds2)
sns.heatmap(cm2, annot=True, fmt='d', cmap='Blues', xticklabels=['Negative', 'Neutral', 'Positive'], 
            yticklabels=['Negative', 'Neutral', 'Positive'])
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix for Base Roberta Model on Test Data')
plt.savefig("./plots/Confusion_Matrix_For_base_Roberta_Model_on_test_data.png", dpi=300, bbox_inches='tight')  # Save the plot
plt.show()


# test statistical improvement of finetuned roberta model using McNemar's Test
y_true = val_labels
y_pred_base = preds2
y_pred_finetuned = preds1

# Create a 2x2 contingency table:
# b: base wrong, finetuned correct
# c: base correct, finetuned wrong
b = c = 0
for yt, yb, yf in zip(y_true, y_pred_base, y_pred_finetuned):
    if yb != yt and yf == yt:
        b += 1
    elif yb == yt and yf != yt:
        c += 1

table = [[0, b],
         [c, 0]]

result = mcnemar(table, exact=True)
print(f"McNemar's Test p-value: {result.pvalue:.5f}")

